function ColumnCipher.getColumnOrder 5
push argument 0
call String.length 1
pop local 0
push local 0
call Array.new 1
pop local 1
push constant 0
pop local 2
label WHILE_EXP0
push local 2
push local 0
lt
not
if-goto WHILE_END0
push local 2
push local 1
add
push local 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP0
label WHILE_END0
push constant 0
pop local 2
label WHILE_EXP1
push local 2
push local 0
lt
push constant 1
sub
not
if-goto WHILE_END1
push constant 0
pop local 4
label WHILE_EXP2
push local 4
push local 0
lt
push local 2
sub
push constant 1
sub
not
if-goto WHILE_END2
push argument 0
push local 4
push local 1
add
pop pointer 1
push that 0
call String.charAt 2
push argument 0
push local 4
push constant 1
add
push local 1
add
pop pointer 1
push that 0
call String.charAt 2
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 4
push local 1
add
pop pointer 1
push that 0
pop local 3
push local 4
push local 1
add
push local 4
push constant 1
add
push local 1
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 4
push constant 1
add
push local 1
add
push local 3
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_FALSE0
push local 4
push constant 1
add
pop local 4
goto WHILE_EXP2
label WHILE_END2
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP1
label WHILE_END1
push local 1
return
function ColumnCipher.mod 0
label WHILE_EXP0
push argument 0
push argument 1
gt
push constant 1
sub
not
if-goto WHILE_END0
push argument 0
push argument 1
sub
pop argument 0
goto WHILE_EXP0
label WHILE_END0
push argument 0
return
function ColumnCipher.encrypt 10
push argument 0
call String.length 1
pop local 0
push argument 1
call String.length 1
pop local 1
push local 0
push local 1
call Math.divide 2
pop local 2
push local 0
push local 1
call ColumnCipher.mod 2
push constant 0
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 2
push constant 1
add
pop local 2
label IF_FALSE0
push local 1
pop local 3
push local 2
push local 3
call Math.multiply 2
call String.new 1
pop local 8
push local 2
push local 3
call Math.multiply 2
call Array.new 1
pop local 7
push constant 0
pop local 4
label WHILE_EXP0
push local 4
push local 0
lt
not
if-goto WHILE_END0
push local 4
push local 7
add
push argument 0
push local 4
call String.charAt 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 4
push constant 1
add
pop local 4
goto WHILE_EXP0
label WHILE_END0
label WHILE_EXP1
push local 4
push local 2
push local 3
call Math.multiply 2
lt
not
if-goto WHILE_END1
push local 4
push local 7
add
push constant 32
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 4
push constant 1
add
pop local 4
goto WHILE_EXP1
label WHILE_END1
push argument 1
call ColumnCipher.getColumnOrder 1
pop local 9
push constant 0
pop local 5
label WHILE_EXP2
push local 5
push local 1
lt
not
if-goto WHILE_END2
push local 5
push local 9
add
pop pointer 1
push that 0
pop local 6
push constant 0
pop local 4
label WHILE_EXP3
push local 4
push local 2
lt
not
if-goto WHILE_END3
push local 8
push local 4
push local 3
call Math.multiply 2
push local 6
add
push local 7
add
pop pointer 1
push that 0
call String.appendChar 2
pop temp 0
push local 4
push constant 1
add
pop local 4
goto WHILE_EXP3
label WHILE_END3
push local 5
push constant 1
add
pop local 5
goto WHILE_EXP2
label WHILE_END2
push local 7
call Array.dispose 1
pop temp 0
push local 8
return
function ColumnCipher.decrypt 12
push argument 0
call String.length 1
pop local 0
push argument 1
call String.length 1
pop local 1
push local 1
pop local 3
push local 0
push local 1
call Math.divide 2
pop local 2
push local 0
push local 1
call ColumnCipher.mod 2
push constant 0
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 2
push constant 1
add
pop local 2
label IF_FALSE0
push local 2
push local 3
call Math.multiply 2
call String.new 1
pop local 9
push local 2
push local 3
call Math.multiply 2
call Array.new 1
pop local 8
push argument 1
call ColumnCipher.getColumnOrder 1
pop local 10
push local 3
call Array.new 1
pop local 11
push constant 0
pop local 5
label WHILE_EXP0
push local 5
push local 1
lt
not
if-goto WHILE_END0
push local 5
push local 10
add
pop pointer 1
push that 0
push local 11
add
push local 5
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 5
push constant 1
add
pop local 5
goto WHILE_EXP0
label WHILE_END0
push constant 0
pop local 5
push constant 0
pop local 6
label WHILE_EXP1
push local 5
push local 1
lt
not
if-goto WHILE_END1
push local 5
push local 11
add
pop pointer 1
push that 0
pop local 7
push constant 0
pop local 4
label WHILE_EXP2
push local 4
push local 2
lt
not
if-goto WHILE_END2
push local 6
push local 0
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 4
push local 3
call Math.multiply 2
push local 7
add
push local 8
add
push argument 0
push local 6
call String.charAt 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 6
push constant 1
add
pop local 6
label IF_FALSE1
push local 4
push constant 1
add
pop local 4
goto WHILE_EXP2
label WHILE_END2
push local 5
push constant 1
add
pop local 5
goto WHILE_EXP1
label WHILE_END1
push constant 0
pop local 4
label WHILE_EXP3
push local 4
push local 2
push local 3
call Math.multiply 2
lt
not
if-goto WHILE_END3
push local 4
push local 0
lt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 9
push local 4
push local 8
add
pop pointer 1
push that 0
call String.appendChar 2
pop temp 0
label IF_FALSE2
push local 4
push constant 1
add
pop local 4
goto WHILE_EXP3
label WHILE_END3
push local 8
call Array.dispose 1
pop temp 0
push local 9
return
